
/*
  	Event driven "door automat" ML13
	Led light on indicate open door. All on for fully open
	This version is just for test in the simulator.
	File name : ML13_irq_program_draft.c
	This is a skeleton for the exercise nr 6_2 in DIT165
	2013-02-24

*/


// Following TYPES is defined, local in this modul,  and could be used to specify type of interrupt with 
// the global variable int interruptType. ( Note : The name is converted to _interruptType by the C-compiler)
#define LEFT_BUTTON	0x08

#define NO_IRQ_TYPE	0
#define SENSOR		1
#define CLOSED_DOOR	2
#define OPENED_DOOR	4

#define TIME_OUT	32   // Common define in the assembly file is needed

// Codes for closing/opening the door.
#define OPEN_DOOR       0x01
#define CLOSE_DOOR	0x02

// Register addresses
#define ML13_Status	 0x0B00
#define ML13_Control	 0x0B00
#define ML13_IRQ_Control 0x0B01
#define ML13_IRQ_Status  0x0B01

// Macros for read and write in ML13 register.
#define REG8(x) *((unsigned char *)(x))

// Macro for write IRQ routin adress in vector table.
#define  SET_IRQ_VECTOR(interrupt_handler, address)    *((unsigned int *) address ) = &(interrupt_handler)


// -------  Declaration of functions in this modul ------------


// ------    Declaration of functions in ML13_irq_asm_routin.s12	
extern void standby(void);
extern void timerSetup(void);
extern void setTimeout(int);

void initIrq();	

// ------    Declariation of the interrupt routin

// A global variable affected by the interrupt handler void  ML13_interrupt( void ) 
// and by the function timeout in the asm-file. 

int interruptType;
char* address = 0xB00;
char* place = 0x3FF2;

// ---------- Main program -------
void main()
{

initIrq();
*address = 0x02;
puts("Starting");
while(1)	{
	printf("%x\n", *place);
}
}


// Function for system setup ( IRQ ....)




// -----------------------------------------------------------------------------------------
// Interrupt service function for hardware irq ( vector address 0x3FF2 )
// This routin will be called when any IRQ from the ML13 modul( Sensor(Key stroke), 
//door opened, door closed..)
__interrupt void  ML13_interrupt( void )
{
	puts("Hello world");
	REG8(ML13_IRQ_Control)=0x01;   // Ack of the hardware irq 
}

// ---------------initiation for IRQ handle of ML13 irq
void initIrq(){
puts("Initiating IRQ...");
SET_IRQ_VECTOR(ML13_interrupt, 0x3FF2); // Address for IRQ routines exception vector table
__asm(" CLI"); // Inline assemby , Clear IRQ mask bit in CPU CCR register
//REG8(ML13_IRQ_Control)= 0x00; // Enable IRQ from ML13 unit
}


     
